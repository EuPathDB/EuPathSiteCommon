#!/usr/bin/perl

my ($projectsList, $fileNameTemplate) = @ARGV;

usage() unless $fileNameTemplate && $projectsList;

my @projects;
# use AI to figure out if we have a projects list or a projects file
if ($projectsList =~ /,/ || $projectsList =~ /^\w+DB$/) {
  @projects = split(/,\s*/, $projectsList);
} else {
  open(F, $projectsList) || die "Can't open projects_file '$projectsList'\n";
  while (<F>) {
    my ($abbrev, $project) = split(/\s/);
    die "In projects_file '$projectsList' abbrev '$abbrev' is not valid.  It should be four letters\n" unless $abbrev =~ /\w\w\w\w/;
    die "In projects_file '$projectsList' project '$project' is not valid.  It should end in DB\n" unless $project =~ /DB$/ || $project eq 'OrthoMCL';
    push(@projects, $project);
  }
  close(F);
}

die "Your meta file template '$fileNameTemplate' must include the macro 'PROJECT'\n" unless $fileNameTemplate =~ /PROJECT/;


foreach my $project (@projects) {
  my $metaFile = $fileNameTemplate;
  $metaFile =~ s/PROJECT/$project/;
  die "Can't find meta file '$metaFile'\n" unless -e $metaFile;
  my $cmd = "eupathSiteConfigure -model $project -filename $metaFile 'monitorBlockedThreads: false'";
  print STDERR "$cmd\n";
  system($cmd) && die "Failed running cmd:\n$cmd\n";
}

sub usage {

die "
Call eupathSiteConfigure for a set of projects.

Usage: eupathMultiSiteConfigure <projects_list | projects_file> meta_file_name_template

Provide either projects_list or projects_file.

Where:
  projects_list: a comma delimited list of projects to run eupathSiteConfigure
  projects_file: a tab file.  Each row has instance suffix and project name, eg:  plas PlasmoDB.
  meta_file_name_template:  eg, PROJECTMetaConfig.yaml (PROJECT is the macro that each project name from projects_list is substituted into)

";

}
