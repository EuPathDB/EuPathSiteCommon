#!/usr/bin/perl

use Getopt::Long;
use strict;

my ($controlDir, $primaryModel, $projects, $removeGuestsCutoff, $mappingFileQuestion, $mappingFileOrganism, $userDb, $stopAfterStep, $skipStepsString, $log4jProp, $listSteps);
my $schema = "userlogins5";
my $replicationContext = "no";
my $cleanAppDBWdkCache = "yes";
my $cleanUserDBModelCache = "yes";
my $cleanExpandedSteps = "yes";
my $projectsWithMapping = "PlasmoDB,EuPathDB";

 

&GetOptions('controlDir=s' => \$controlDir,
            'primaryModel=s' => \$primaryModel,
            'projects=s' => \$projects,
            'removeGuestsCutoff=s' => \$removeGuestsCutoff,
            'mappingFilesDir=s' => \$mappingFilesDir,
            'userDb=s' => \$userDb,
            'stopAfterStep=s' => \$stopAfterStep,
            'skipSteps=s' => \$skipStepsString,
            'log4jPropFile=s' => \$log4jProp,
	          'listSteps!' => \$listSteps,
           );

usage() unless ($controlDir || $listSteps);

my @stepstest = (
	     ['echo-1', "sleep 10; echo $controlDir"],
	     ['echo-2', 'sleep 10; echo goodbye'],
	     ['ls','ls /home/pickle'],
	    );

my @stepsMiddleOfRelease = (
         ['wdkCacheModel', "wdkCacheModel -expand -model '$projects'", 0 ],
         ['mapOrganism', "eupathMapOrganism PROJECT_MACRO $mappingFilesDir" , 0 , $projectsWithMapping],
         ['mapQuestionName', "eupathMapQuestion PROJECT_MACRO $mappingFilesDir" , 0 , $projectsWithMapping],
	       ['expandStep', "wdkExpandStep -model $primaryModel", 0],
	       ['invalidStepReport',"wdkInvalidStepReport -model $primaryModel", 0],
	    );

my @steps = (
	       ['removeGuests', "wdkRemoveGuests -model $primaryModel -cutoffDate $removeGuestsCutoff", 0 ], 
         ['sleepAfterRemoveGuests', "sleep 1800", 1 ], #wait for replication to catch up
         ['validateReplAfterGuests', "validateReplication -schema $schema -rowTolerance 20" , 1 ],
         ['removeBroken', "wdkRemoveBroken -model $primaryModel"  ],  # remove broken strategies
         ['sleepAfterRemoveBroken', "sleep 1800" , 1 ], #wait for replication to catch up
         ['validateReplAfterBroken', "validateReplication -schema $schema -rowTolerance 20" , 1 ],
         @stepsMiddleOfRelease,
         ['validateSteps', "wdkValidateStep -model PROJECT_MACRO" , 0 , $projects],
	    );


if ($listSteps) {
  print STDERR "\nListing steps...\n\n";
  foreach my $step (@steps) {
    print STDERR "$step->[0]\t$step->[1]\n\n";
  }
  exit 0;
}

my %steps;
foreach my $step (@steps) {
  die "Duplicate step name '$step->[0]'\n" if $steps{$step->[0]};
  $steps{$step->[0]} = $step->[1];
}


my %skipSteps;
if ($skipStepsString) {
  my @skipSteps = split(/,\s*/, $skipStepsString);
  foreach my $step (@skipSteps) {
    die "Trying to skip step '$step' which does not exist\n" unless $steps{$step};
    $skipSteps{$step} = 1;
  }
}

chdir $controlDir || die "Can't 'chdir $controlDir'\n";
my $cursor = 0;
while (1) {
  my $stepName = $steps[$cursor]->[0];
  my $stepCmd = $steps[$cursor]->[1];
  if (-e "$stepName.failed") {
    &log("Step '$stepName' failed.  Can't proceed");
    exit 1;
  }
  if (-e "$stepName.done") {
    &log("Step '$stepName' done");
    if ($stopAfterStep eq $stepName) {
      &log("StopAfter='$stepName'.  Exiting");
      exit 0;
    }
    $cursor++;
    next;
  }
  if (-e "$stepName.running") {
    next;
  }
  if ($skipSteps{$stepName}) {
    &log("Step '$stepName' skipped");
    $cursor++;
    next;
  }
  &log("Step '$stepName' running: '$stepCmd'");
  my $cmd = "echo '$stepCmd' | eupathUserDbMigrationStepWrapper $stepName &";
  system($cmd) && die "Failed running '$cmd'";
  sleep(1);
}
&log("Pipeline run complete");

sub log {
  my ($msg) = @_;
  my $t = localtime;
  print STDERR "$t\t$msg\n\n";
}


sub usage {

die "
eupathUserDbMigration --controlDir my_control_dir --primaryModel PlasmoDB  --projects \"EuPathDB, PlasmoDB\" --removeGuestsCutoff \"2016/1/15\"  --mappingFilesDir my_mapping_files_dir [--userDb ApiCommDevN] [--stopAfterStep validStepReport] [--skipSteps deleteAllStrats,deleteAllUsers]  [--log4jPropFile my_log4j] [--listSteps]

Where:
  controlDir: the dir in which this program will write all its log files
  primaryModel: the model to use to find the model-config.xml
  projects: the projects to migrate
  removeGuestsCutoff: used by the remove guests step.  the date cutoff.
  mappingFilesDir: a directory containing mapping files. (see below)
  userDb: the user db to log into.  (Default: found in model-config.xml)
  stopAfterStep: the name of the step to stop after (Default: none)
  skipSteps: a comma delimited list of steps to skip (Default: none)
  log4jPropFile: a log4j.properties file to use (Default: hard coded by this program)
  listSteps: don't run any steps, just list them, and their commands

Mapping files
The mappingFilesDir contains a set of files describing mappings for question names and parameter values.
MORE DETAILS HERE...

";

}
