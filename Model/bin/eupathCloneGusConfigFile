#!/usr/bin/perl

use strict;

my ($masterGusConfigFile, $instanceSuffix, $projectsFile) = @ARGV;

usage() unless scalar(@ARGV) == 3;

open(F, $projectsFile) || die "Can't open projects_file '$projectsFile'\n";
my @projects;
while(<F>) {
  my ($abbrev, $project) = split(/\s/);
  die "In projects_file '$projectsFile' abbrev '$abbrev' is not valid.  It should be four letters\n" unless $abbrev =~ /\w\w\w\w/;
  die "In projects_file '$projectsFile' project '$project' is not valid.  It should end in DB\n" unless $project =~ /DB$/;
  push(@projects, [$abbrev, $project]);
}
close(F);

my $masterPrefix;

open(F, $masterGusConfigFile) || die "Can't open master gus.config file '$masterGusConfigFile'\n";
my @masterFileLines = <F>;
close(F);

my $projectLineIndex;
my $dbiLineIndex;
my $jdbcLineIndex;
my $index = 0;
foreach my $line (@masterFileLines) {
  $projectLineIndex = $index if $line =~ /^project=/;

  # dbiDsn=dbi:Oracle:plas-inc
   $dbiLineIndex = $index if ($line =~ /^\s*dbiDsn\s*=/);

  # jdbcDsn=jdbc:oracle:oci:@plas-inc
  $jdbcLineIndex = $index if ($line =~ /^\s*jdbcDsn\s*=/);

  $index++;
}
print STDERR "$jdbcLineIndex\n";

die "Can't find 'project:' or 'dbi' lines in example gus.config file\n" unless $projectLineIndex && $dbiLineIndex && $jdbcLineIndex;

foreach my $project (@projects) {
  my $prefix = $project->[0];
  my $project = $project->[1];
  my $dir = "$ENV{GUS_HOME}/config/${project}";
  mkdir $dir unless -d $dir;
  my $file = "$dir/gus.config";
  open(C, ">$file") || die "Can't open '$file' for output\n";
  my $i = 0;
  my $instance = "${prefix}$instanceSuffix";
  foreach my $line (@masterFileLines) {
    $line =~ s/^\s*project\s*=\s*\S+/project=$project/ if $i == $projectLineIndex;
    $line =~ s/^\s*dbiDsn\s*=\s*dbi:Oracle:\S+/dbiDsn=dbi:Oracle:$instance/ if $i == $dbiLineIndex;
    $line =~ s/^\s*jdbcDsn\s*=\s*jdbc:oracle:oci:\S+/jdbcDsn=jdbc:oracle:oci:\@$instance/ if $i == $jdbcLineIndex;
    $i++;
    print C $line;
  }
  close(C);
}

sub usage {

  die "

Generate a set of gus.config files from a provided example gus.config file.  Each output file is for one project
website, eg, ToxoDB, CryptoDB, etc.

Usage: eupathCloneGusConfigFile master_file instance_suffix projects_file

Where:
  master_file:       the gus.config file to copy from.
  instance_suffix:   Use this suffix to construct the instance names in the generated files.
                     Eg, provide 029n to get instances like toxo029n, cryp029n, etc.
  projects_file:     A tab delimited file.  Each row has instance suffix and project name, eg:  plas PlasmoDB

Example command line:

  eupathCloneGusConfigFile \$GUS_HOME/config/gus.config 029n projects_file

Output: a set of gus.config files, each one of the form \$GUS_HOME/PlasmoDB/gus.config, for each of the provided projects

The output files are identical to the example gus.config file, except these lines, which are adjusted to reflect the different projects:
 project=PlasmoDB
 dbiDsn=dbi:Oracle:plas-inc
 jdbcDsn=jdbc:oracle:oci:\@plas-inc

";
}
