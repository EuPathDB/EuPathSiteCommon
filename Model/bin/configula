#!/usr/bin/perl

# This script is unsupported. Use at your own risk.

# ./configula  --alogin=cryptodbwww --adb=cryp120n --udb=apicomm q1.cryptodb.org

# Wrapper on eupathSiteConfigure
# see eupathSiteConfigure details at
# https://docs.google.com/a/apidb.org/document/d/1zy_HMf7BFf2L2ZhHHIr1K2GuTbQXJx1JdnoDOl_4OHE/
# This script
#   - autogenerates the metaConfig file for eupathSiteConfigure.
#   - validates the required properties in metaConfig file against sample
#     - fails if either missing or extraneous properties are found
#   - bootstraps many values from EuPathDB's file and directory naming conventions

# This script is rated 'chmod +x'

use strict;
use File::Basename;
use File::Path qw(make_path);
use Cwd qw(realpath);
use Fcntl ':mode';
use POSIX qw(strftime);
use DBI;
use XML::Twig;
use XML::Simple;
use Getopt::Long;
use File::Copy;
use YAML qw(LoadFile);

my ($this) = basename $0;
print "<$this>" . ' $Revision$' . "\n";

my %dblinkMap;
####################################################################
# project defaults
####################################################################

# shared
my $g_platform = "Oracle";
my $g_userLoginSchema = "userlogins4";
my $g_commentSchema = "comments2";
my $g_showConnections = "false";
my $g_showConnectionsInterval = "10";
my $g_showConnectionsDuration = "600";
my $g_maxActive = "20";
my $g_maxWait = "50";
my $g_userDbLink = '@prods.login_comment';
my $g_use_map = 0;
my $g_skip_db_test = 0;

# model-config
my $modelName = "apiCommonModel";
my $smtpServer = "127.0.0.1";
my $defaultRole = "wdk_user";
my $secretKeyFile = '/usr/local/tomcat_instances/shared/.apidb_wdk_key';
my $appDb_login = "";
my $appDb_password = "";
my $appDb_connectionUrl = "";
my $appDb_maxIdle = "10";
my $appDb_minIdle = "1";
my $userDb_login = "";
my $userDb_password = "";
my $userDb_connectionUrl = "";
my $userDb_maxIdle = "1";
my $userDb_minIdle = "0";
my $userDb_wdkEngineSchema = "wdkengine." ;
my $userDb_userSchema = "userlogins4.";

# comments-config
my $cc_maxIdle = "3";
my $cc_minIdle = "1";
my $cc_maxWait = "50";
my $cc_userFileSchema = "uploads";
my $cc_userFileUploadDir = "/var/www/Common/communityFilesMirror";

my $site_admin_email = 'sfischer@pcbi.upenn.edu, jerric@pcbi.upenn.edu, aurreco@uga.edu, mheiges@uga.edu, rdoherty@pcbi.upenn.edu, dfalke@uga.edu';

# profileSimilarity-config
my %numTimePoints = ('PlasmoDB' => '48', 'ToxoDB' => '12');
my %skipTimes = ('PlasmoDB' => '23,29', 'ToxoDB' => '');

####################################################################
# user input
####################################################################

my (
    $appDb_login,
    $appDb_database,
    $userDb_database,
);

{
  local $SIG{__WARN__} = sub { 
    my $message = shift;
    die "<$this> FATAL: " . $message;
  };
  
  my $optRslt = GetOptions(
      "alogin=s"   => \$appDb_login,
      "adb=s"      => \$appDb_database,
      "udb=s"      => \$userDb_database,
      "usemap"     => \$g_use_map,  # get config data from a master file from gus_home/config
      "skipdbtest" => \$g_skip_db_test, # for when you know this will fail, or know it will succeed!
      );
}

my $target_site = lc $ARGV[0];


####################################################################
# system values
####################################################################
my $euparc = find_euparc();
my $web_base_dir = '/var/www';
my $site_symlink = "$web_base_dir/$target_site";
my $product = dirname(readlink $site_symlink);
my $project_home = realpath("$site_symlink/project_home");
my $gus_home = realpath("$site_symlink/gus_home");
my $site_etc = realpath("$site_symlink/etc");
my $wdk_config_dir = "$gus_home/config";
my $wdk_product_config_dir = "$gus_home/config/$product";
my $blast_app_path = "/opt/WU_BLAST";
my $blast_tmp_dir = "/var/www/Common/tmp/blast";
my $map_file = "$site_etc/master_configuration_set";
my $webapp = basename(readlink $site_symlink);
my ($webapp_nover) = $webapp =~ m/(^[a-zA-Z_]+)/;
my $meta_config_file = "${wdk_config_dir}/metaConfig_${this}";

# read for product version number. Use the source because it may not
# yet be present at the dest (e.g. if --usemap is specified but no map data found)
my $wdk_model_xml = "$gus_home/lib/wdk/$modelName.xml";

my %site_versions = site_versions();
my $site_version = $site_versions{$product};
my %build_numbers = build_numbers();
my $build_number = $build_numbers{$product};
my $common_webservices_dir = (-e "/var/www/Common/prodSiteFilesMirror") ?
    "Common/prodSiteFilesMirror/webServices" :
    "Common/devSiteFilesMirror/webServices";
my $webservice_files_mirror = "$web_base_dir/$common_webservices_dir";
my $rls_webservice_data_dir = "$webservice_files_mirror/$product/build-$build_number";

my $server_hostname = qx(/bin/hostname);

my $host_class = host_class();
my $host_class_prefix = $host_class ? "${host_class}." : '';

####################################################################
# pre-flight sanity checks
####################################################################

if ( $g_use_map && ($appDb_login || $appDb_database || $userDb_database)) {
    die "can not set specific values when using --usemap\n";;
}

if ($g_use_map) {
    die "--usemap chosen but $map_file not found\n" unless ( -r $map_file);
}

####################################################################
####################################################################

if ($g_use_map) {
    open(my $fh, $map_file) or die $!;
    my @hits = grep /^$target_site/, <$fh>;
    (my $site, $appDb_database,  $userDb_database, $appDb_login,  $userDb_login) = split(/\s+/, @hits[0]);
    print "<$this> using $appDb_login\@$appDb_database,  $userDb_login\@$userDb_database\n";
    if ( ! ($appDb_login && $appDb_database && $userDb_database) ) {
        die "$map_file does not have sufficient data for $target_site. Quitting with no changes made.\n";
    }
}

my ($prod_site) = $target_site =~ m/([^\.]+\.org)/;

my $appDb_password = std_password($appDb_login, $appDb_database);
my $appDb_connectionUrl = 'jdbc:oracle:oci:@' . $appDb_database;

if ( ! $appDb_password ) {
  die "Did not find password for $appDb_login in $euparc . Quitting with no changes made.\n";
}

my $userDb_login = $userDb_login || 'uga_fed';
my $userDb_password = std_password($userDb_login, $userDb_database);;
my $userDb_connectionUrl = 'jdbc:oracle:oci:@' . $userDb_database;

if ( ! $userDb_password ) {
  die "Did not find password for $appDb_login in $euparc . Quitting with no changes made.\n";
}

# webapp_nover is always valid thanks to apache redirects, and
# is especially desired for production sites
my $webServiceUrl = 'http://' . $target_site . '/' . $webapp_nover . '/services/WsfService';

####################################################################
# configuration sanity checks
####################################################################
warn "\nWARN: I do not know what dblink to use for '$userDb_database'\n" .
     "  I know about: " . join(', ', keys(%dblinkMap)) . "\n\n"
    if (dblink($userDb_database) eq '@');

testDbConnection($appDb_login, $appDb_password, $appDb_database);
testDbConnection($userDb_login, $userDb_password, $userDb_database);

if (! -d $webservice_files_mirror) {
  warn "\nWARN: '$webservice_files_mirror' does not exist\n\n";
} elsif (! -d $rls_webservice_data_dir) {
  warn "\nWARN: '$rls_webservice_data_dir' does not exist. \n" .
     "  Check that buildNumber '$build_number' in \n".
     "  '$wdk_model_xml'\n" .
     "  matches build-N directory.\n\n";
}


####################################################################
# Generate meta config file
####################################################################

open(MC, ">$meta_config_file") or die "could not open $meta_config_file for writing.\n";

print MC  <<"EOF";
# Generated by $this on @{[ strftime("%m/%d/%Y at %H:%M", localtime) ]}

required:
 project: $product

 appDb.instance: $appDb_database
 appDb.login: $appDb_login
 appDb.password: $appDb_password
 appDB.userDbLink:  @{[ dblink($userDb_database) ]}

 userDb.instance: $userDb_database
 userDb.login: $userDb_login
 userDb.password: $userDb_password

 commentDb.instance: $userDb_database
 commentDb.login: $userDb_login
 commentDb.password: $userDb_password
 webServiceUrl: $webServiceUrl
 gushome: $gus_home

 plasmoPubsURL: 'http://v4-4.plasmodb.org/publications/publications-v5.php?uid=28&gid='
 
 eupaURL: http://${host_class_prefix}eupathdb.org/eupathdb/
 orthURL: http://${host_class_prefix}orthomcl.org/orthomcl/
 amebURL: http://${host_class_prefix}amoebadb.org/amoeba/
 crypURL: http://${host_class_prefix}cryptodb.org/cryptodb/
 fungURL: http://${host_class_prefix}fungidb.org/fungidb/
 giarURL: http://${host_class_prefix}giardiadb.org/giardiadb/
 micrURL: http://${host_class_prefix}microsporidiadb.org/micro/
 piroURL: http://${host_class_prefix}piroplasmadb.org/piro/
 plasURL: http://${host_class_prefix}plasmodb.org/plasmo/
 toxoURL: http://${host_class_prefix}toxodb.org/toxo/
 tricURL: http://${host_class_prefix}trichdb.org/trichdb/
 trypURL: http://${host_class_prefix}tritrypdb.org/tritrypdb/

sections:
 - apiSite
EOF

close MC;
####################################################################
# Do It!
####################################################################

$ENV{'GUS_HOME'} = $gus_home;
$ENV{'PATH'} = "$gus_home/bin";
my $sample = $ENV{'GUS_HOME'} . '/lib/yaml/metaConfig.yaml.sample';

validate_meta_config($sample, $meta_config_file);
my $short_cmd = 'eupathSiteConfigure';
my $cmd = "$gus_home/bin/$short_cmd -model $product -filename $meta_config_file";
print "<$this> Attempting: '$cmd' ...";
system("$cmd");
if ($? == 0) {
  print "<$this> OK\n";
} elsif ($? == -1) {
  print "\n<$this> FATAL: $!\n";
  exit -1;
} else {
  print "\n<$this> FATAL: $short_cmd exited with status " . ($? >> 8) . "\n";
  exit ($? >> 8);
};
####################################################################
# Misc. Subroutines
####################################################################


sub dblink {
    my ($apicomm) = @_;
    %dblinkMap = (
        'apicomms'    => 'prods.login_comment',
        'apicommn'    => 'prodn.login_comment',
        'apicommdevs' => 'devs.login_comment',
        'apicommdevn' => 'devn.login_comment',
    );
    
    return  $dblinkMap{lc($apicomm)};
}

# retreive password from users ~/.euparc
sub std_password {
    my ($login, $database) = map{ lc } @_;
    
    my $rc = XMLin($euparc,
        ForceArray => ['user'],
        ForceContent => 1,
        KeyAttr => [ user => "login"],
        ContentKey => '-content',
    );
    
    return $rc->{database}->{$database}->{user}->{$login}->{password} ||
        $rc->{database}->{user}->{$login}->{password};
}

# return 'class' of host, e.g. qa, beta, integrate or hostname.
# This is not always the hostname. A site with 'q1' hostname is a 'qa' class.
sub host_class {
    my ($host_class) = $target_site =~ m/^([^\.]+)\./;
    $host_class = 'qa' if $host_class =~ m/^q/;
    $host_class = 'beta' if $host_class =~ m/^b/;
    $host_class = '' if $host_class =~ m/^w/;
    return $host_class;
}

sub webapp_domain_map {
    return {
        'amoeba'    => 'amoebadb.org',
        'cryptodb'  => 'cryptodb.org',
        'eupathdb'  => 'eupathdb.org',
        'fungidb'   => 'fungidb.org',
        'giardiadb' => 'giardiadb.org',
        'micro'     => 'microsporidiadb.org',
        'piro'      => 'piroplasmadb.org',
        'plasmo'    => 'plasmodb.org',
        'toxo'      => 'toxodb.org',
        'trichdb'   => 'trichdb.org',
        'tritrypdb' => 'tritrypdb.org',
    };
}

sub domain_from_webapp {
    my ($webapp) = @_;
    my ($webapp_nover) =  $webapp =~ m/(^[a-zA-Z_]+)/;
    my $map = webapp_domain_map();
    return $map->{$webapp_nover};
}

sub webapp_from_domain {
    my ($domain) = @_;
    my $map = webapp_domain_map();
    my %revmap = reverse %$map;
    return $revmap{lc $domain};
}

sub site_versions {
    my %site_versions;
    my $acm = new XML::Twig( 
        keep_spaces => 1, 
        PrettyPrint => 'nice',
        keep_atts_order => 1,
        TwigHandlers => {
          'constant[@name="releaseVersion"]'  => sub { 
             $site_versions{$_[1]->att("includeProjects")} = $_[1]->text;
           },
        }
    );
    $acm->parsefile("$wdk_model_xml");
    return %site_versions;
}

# The buildNumber settings can be defined in aggregate as includeProjects
#  <constant name="buildNumber" includeProjects="PiroplasmaDB,TriTrypDB,TrichDB,ToxoDB,PlasmoDB,MicrosporidiaDB,AmoebaDB,CryptoDB,EuPathDB,GiardiaDB">16</constant>
#  <constant name="buildNumber" includeProjects="FungiDB">4</constant>
#  <constant name="buildNumber" includeProjects="InitDB">0</constant>
# So have to iterate.
sub build_numbers {
    my %aggregate_build_numbers;
    my %build_numbers;
    my $acm = new XML::Twig( 
        keep_spaces => 1, 
        PrettyPrint => 'nice',
        keep_atts_order => 1,
        TwigHandlers => {
          'constant[@name="buildNumber"]'  => sub { 
             $aggregate_build_numbers{$_[1]->att("includeProjects")} = $_[1]->text;
           },
        }
    );
    $acm->parsefile("$wdk_model_xml");
    
    # We now have a hash like
    #    'PiroplasmaDB,TriTrypDB,TrichDB,ToxoDB' => 15,
    #    'FungiDB' => 4,
    # Split the keys on commas.
    for my $projects_included (keys %aggregate_build_numbers) {
        #  $projects_included == 'PiroplasmaDB,TriTrypDB,TrichDB,ToxoDB'
        my @include_projects = split(',', $projects_included); 
        for my $project (@include_projects) {
            $build_numbers{$project} = $aggregate_build_numbers{$projects_included};
        }
    }

    return %build_numbers;
}

sub testDbConnection {
    my ($login, $password, $db) = @_;
    return if $g_skip_db_test;
    my $dbh = DBI->connect("dbi:Oracle:$db", $login, $password, {
          PrintError =>0,
          RaiseError =>0
        }) or warn "\nWARN: Can't connect to $db with $login: $DBI::errstr\n\n";;
    
    
}

sub find_euparc  {
    # ibuilder shell sets HOME to be the website and 
    # REAL_HOME to that of joeuser
    if ( -r "$ENV{REAL_HOME}/.euparc") {
        return "$ENV{REAL_HOME}/.euparc";
    } elsif ( -r "$ENV{HOME}/.euparc") {
        return "$ENV{HOME}/.euparc";
    }
    die "Required .euparc file not found\n";
}

# Compare metaConfig.yaml.sample with given metaconfig file,
# checking for missing or extra properties, indicating that
# either the sample or this script needs to be updated.
sub validate_meta_config {
  my ($sample, $meta_config) = @_;
  my @required_not_found;
  my @extra_found;

  print "\n<$this>  Validating the required properties in\n $meta_config\nagainst\n $sample\n\n";
  
  my ($sample_settings) = LoadFile($sample);
  my $meta_settings = LoadFile($meta_config);

  for my $property (keys %{$sample_settings->{'required'}}) {
    if ( ! defined $meta_settings->{'required'}->{$property} ) {
      push @required_not_found, $property;
    }
  }

  for my $property (keys %{$meta_settings->{'required'}}) {
    if ( ! defined $sample_settings->{'required'}->{$property} ) {
      push @extra_found, $property;
    }
  }

  if (scalar(@required_not_found) > 0 || scalar(@extra_found) > 0) {
    if (scalar(@required_not_found) > 0) {
      print "\n";
      print "<$this> Fatal: Required properties not found:\n";
      print join("\n", @required_not_found);
    }
    print "\n";
    if (scalar(@extra_found) > 0) {
      print "\n";
      print "<$this> Fatal: Found properties not required:\n";
      print join("\n", @extra_found);
    }
    print "\n";
    print "Resolve this in either\n";
    print " $sample\n";
    print "or the meta config file generation in the '$this' script.\n";
    exit 1;
  }

}

