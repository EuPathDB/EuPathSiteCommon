#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use ApiCommonWebsite::Model::ModelConfig;
use Getopt::Long;
use DBI;
use DBD::Oracle;

use lib $ENV{CGILIB};

my $GUS_HOME = $ENV{GUS_HOME};

my $reporter = "genbank";
my $baseDir;
my $model;

my $params;

# get the model and dir (will pass other params directly)
&GetOptions('schema=s' => \$schema,
            'primaryModel=s' => \$primaryModel,
            'rowTolerance=s' => \$rowTolerance,
	    'remoteUserDbiDsn=s' => \$remoteUserDbiDsn,
	   );

my $modelConfig = ApiCommonWebsite::Model::ModelConfig->new($primaryModel);
my $localUserDbh = &getDbh($modelConfig->getUserDbiDsn(), $modelConfig->getLogin(), $modelConfig->getPassword());
my $remoteUserDbh = &getDbh($remoteUserDbiDsn, $modelConfig->getLogin(), $modelConfig->getPassword());

my @tests = (["user table", "select count(*) from $schema.user"],
	     ["step table", "select count(*) from $schema.step"]
	    );

my $foundError = 0;
foreach my $test (@tests) {
  print STDERR "Running test $test->[0]\n";
  my $count = &compareResults("user table", $sql, $localUserDbh, $remoteUserDbh);
  print STDERR "Diff: $count\n";
  $foundError |= $count > $rowTolerance;
}
die "One or more tests had more than $rowTolerance difference\n" if $foundError;


sub compareResults {
  my ($testName, $sql, $localUserDbh, $remoteUserDbh) = @_;

  my $localCount = &getCount($localUserDbh, $sql);
  my $remoteCount = &getCount($remoteUserDbh, $sql);
  return abs($localCount - $remoteCount);
}

sub getCount {
  my ($dbh, $sql) = @_;

  my $stmt = $dbh->prepare($sql);
  $stmt->execute();
  my ($count) = $stmt->fetchrow_array();
  $stmt->finish();
  return $count;
}

sub getDbh {
  my ($dsn, $login, $password) = @_;
  my $dbh = DBI->connect( $dsn, $login, $password) || die "unable to open db handle to ", $dsn;

  # solve oracle clob problem; not that we're liable to need it...
  $dbh->{LongTruncOk} = 0;
  $dbh->{LongReadLen} = 10000000;
  return $dbh;
}
