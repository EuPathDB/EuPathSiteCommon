#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use ApiCommonWebsite::Model::ModelConfig;
use ApiCommonWebsite::Model::DbUtils qw(jdbc2oracleDbi);
use Getopt::Long;
use DBI;

my ($schema, $primaryModel, $rowTolerance, $northUserDbName, $southUserDbName);
&GetOptions('schema=s' => \$schema,
            'primaryModel=s' => \$primaryModel,
            'rowTolerance=s' => \$rowTolerance,
	    'northUserDbName=s' => \$northUserDbName,
	    'southUserDbName=s' => \$southUserDbName,
	   );

usage() unless ($schema && $primaryModel && $rowTolerance && $northUserDbName && $southUserDbName);


my @tests = (["users count", "select count(*) from $schema.users"],
	     ["steps count", "select count(*) from $schema.steps"],
       ["guests count", "select count(*) from $schema.users 
                                        where is_guest = 1"],
	     ["guest steps count", "select count(*) from $schema.steps st, $schema.users u 
                                             where st.user_id = u.user_id 
                                               and u.is_guest = 1"],
	    );




my $modelConfig = ApiCommonWebsite::Model::ModelConfig->new($primaryModel);
my @dsn = split(/\:/, $modelConfig->getUserDbiDsn());  # dbi:Oracle:NAME_OF_DATABASE
$dsn[2] = $northUserDbName;
my $northUserDbiDsn = join(':', @dsn);
$dsn[2] = $southUserDbName;
my $southUserDbiDsn = join(':', @dsn);
my $northUserDbh = &getDbh($northUserDbiDsn, $modelConfig->getLogin(), $modelConfig->getPassword());
my $southUserDbh = &getDbh($southUserDbiDsn, $modelConfig->getLogin(), $modelConfig->getPassword());

print STDOUT "\n";

my $foundError = 0;
foreach my $test (@tests) {
  print STDOUT "\n-----\nRunning test: $test->[0]\n";
  my $count = &compareResults($test->[0], $test->[1], $northUserDbh, $southUserDbh);
  print STDOUT "Diff: $count\n";
#  $foundError |= $count > $rowTolerance;
}
die "
One or more tests had more than a $rowTolerance row count difference\n\n" if $foundError;


sub compareResults {
  my ($testName, $sql, $northUserDbh, $southUserDbh) = @_;

  my $northCount = &getCount($northUserDbh, $sql);
  print "\nnorth: $northUserDbName -- $northCount\n";
  my $southCount = &getCount($southUserDbh, $sql);
  print "\nsouth: $southUserDbName -- $southCount\n";
  return abs($northCount - $southCount);
}

sub getCount {
  my ($dbh, $sql) = @_;

  my $stmt = $dbh->prepare($sql);
  $stmt->execute();
  my ($count) = $stmt->fetchrow_array();
  $stmt->finish();
  return $count;
}

sub getDbh {
  my ($dsn, $login, $password) = @_;
  print STDOUT "Connecting to $dsn\n";
  my $dbh = DBI->connect( $dsn, $login, $password) || die "unable to open db handle to ", $dsn;

  # solve oracle clob problem; not that we're liable to need it...
  $dbh->{LongTruncOk} = 0;
  $dbh->{LongReadLen} = 10000000;
  return $dbh;
}

sub usage {
  die "
Validate that tables in two WDK UserDBs are propertly synced by replication.  It compares the userDb in the primaryModel's configuration with the userDB specified by the provided southUserDbiDsn.  Both user databases must share a login and password found in model-config.xml.

The individual tests (SQL) are specified inline in the program.  See \$PROJECT_HOME/EuPathSiteCommon/Model/bin/eupathValidationReplication

Usage: eupathValidateReplication --schema schema --primaryModel model --rowTolerance tolerance --northUserDbName db_name --southUserDbName db_name

Where:
  schema: the schema in which to find the tables to test.
  primaryModel: the project in gus_home/config in which to find model-config.xml that has connect info.
  rowTolerance: the number of rows of difference to tolerate between any two compared tables.
  northUserDbName:  the name to use in the connect string, eg, apicommn
  southUserDbName:  the name to use in the connect string, eg, apicomms

";
}
