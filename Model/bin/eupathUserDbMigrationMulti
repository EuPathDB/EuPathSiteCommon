#!/usr/bin/perl

use strict;

usage() unless scalar(@ARGV);

my ($argsMap, $argsArr) = &extractArgs(@ARGV);

die "Error: Can't use eupathUserDbMigrationMulti without a --projects argument\n" unless $argsMap->{'--projects'};

my @projects = split(/,\s*/, $argsMap->{'--projects'});

die "Error: No projects supplied" unless scalar(@projects);

my $controlDir = $argsMap->{'--controlDir'};
die "Error: Control dir '$controlDir' already exists.\n" if -e $controlDir;

mkdir $controlDir || die "Could not create controlDir '$controlDir'\n";

my $logFile = "$controlDir/multi.log";
open(LOG, ">$logFile") || die "Can't open log file '$logFile'\n";

foreach my $project (@projects) {
  my %newArgsMap = %$argsMap;

  $newArgsMap{'--projects'} = $project;
  $newArgsMap{'--primaryModel'} = $project if $newArgsMap{'--primaryModel'};
  $newArgsMap{'--projectsWithMapping'} = $argsMap->{'--projectsWithMapping'} =~ /$project/? $project : '""';
  $newArgsMap{'--controlDir'} .= "/$project";
  if (!mkdir $newArgsMap{'--controlDir'}) {
    print LOG "Could not create controlDir '$newArgsMap{'--controlDir'}'.  Skipping this project\n";
    next;
  }
  my @cmdLineArgs = map { ($_, $newArgsMap{$_}) } @$argsArr;
  my $cmd = "eupathUserDbMigration " . join (" ", @cmdLineArgs) ." 2> $newArgsMap{'--controlDir'}/pipeline.err &";
  print LOG "$cmd\n\n";
  system($cmd);
}

sub extractArgs {
  my @args = @_;
  my %map;
  my @arr;
  my $prevArg;
  foreach my $arg (@args) {
    if (substr($arg,0,2) eq '--') {
      $map{$arg} = "";
      $prevArg = $arg;
      push(@arr, $arg);
    } else {
      $map{$prevArg} = $arg;
    }
  }
  return (\%map, \@arr);
}

sub usage {

die "
Run a set of user db migration pipelines in parallel, one per project.

Usage: eupathUserDbMigrationMulti cmd_line_args

Where: 
  cmd_line_args:  the exact arguments you want passed to each parallel run of eupathUserDbMigration.

The --projects argument is used to drive the parallel runs.  Each project P specified in that list is given its own run.  In those separate runs:
  - the --projects argument is set to a single project, P.
  - the --primaryModel argument is set to P
  - the --projectsWithMapping argument is reduced to P, if it contained P, or empty otherwise
  - the --controlDir argument is appended with /P, to give each run a private control dir named after its project

The set of commands executed by eupathUserDbMigrationMulti are listed in controlDir/multi.log

The standard error of each run of eupathUserDbMigration is in pipeline.err, in the project's control dir.
";

}
