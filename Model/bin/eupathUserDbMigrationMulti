#!/usr/bin/perl

use strict;

usage() unless scalar(@ARGV);

my ($argsMap, $argsArr) = &extractArgs(@ARGV);

die "Error: Can't use eupathUserDbMigrationMulti without arguments: --primaryModel\n" unless $argsMap->{'--primaryModel'};

my $projectsFile = "$ENV{PROJECT_HOME}/EuPathSiteCommon/Model/data/migration/projects.txt";
$projectsFile = $argsMap->{'--projectsFile'} if $argsMap->{'--projectsFile'};

# by default use projects file, unless command line overrides
my @projects;
if ($argsMap->{'--project'}) {
  @projects = split(/,\s*/, $argsMap->{'--project'});
}
else {
  open(F, $projectsFile) || die "Can't open projectsFile '$projectsFile'\n";
  while (<F>) {
    next if /^#/; # skip comments
    my ($abbrev, $project) = split(/\s/);
    die "In projects_file '$projectsFile' abbrev '$abbrev' is not valid.  It should be four letters\n" unless $abbrev =~ /\w\w\w\w/;
    die "In projects_file '$projectsFile' project '$project' is not valid.  It should end in DB\n" unless $project =~ /DB$/ || $project eq 'OrthoMCL';
    push(@projects, $project);
  }
  close(F);
}

die "Error: No projects supplied" unless scalar(@projects);

my $controlDir = $argsMap->{'--controlDir'};

die "Control dir '$controlDir' does not exist\n" unless (-d $controlDir);

my $logFile = "$controlDir/multi.log";
open(LOG, ">>$logFile") || die "Can't open log file '$logFile'\n";
print LOG "===========================================================================\n\n";
print LOG localtime . "\tRunning cmd: eupathUserDbMigrationMulti " . join(" ", @ARGV) . "\n\n";


# do init phase
doPhase($argsMap, $argsArr, "init");

# do each project
my $failedCount = 0;
foreach my $project (@projects) {
  next if ($argsMap->{'--usingSandbox'} && $project eq 'EuPathDB');
  my %newArgsMap = %$argsMap;
  $newArgsMap{'--project'} = $project;
  $newArgsMap{'--primaryModel'} = $project if $newArgsMap{'--primaryModel'};
  $newArgsMap{'--controlDir'} .= "/$project";
  $newArgsMap{'--phase'} = "main";
  if (! -d $newArgsMap{'--controlDir'} && !mkdir $newArgsMap{'--controlDir'}) {
    log("Could not create controlDir '$newArgsMap{'--controlDir'}'.  Skipping this project");
    next;
  }
  my $status = runPipeline(\%newArgsMap, $argsArr);
  $failedCount++ if $status;
  &log($project . ($status? " Failed\n" : " Succeeded\n"));
}

# do clean phase
if ($failedCount) {
  &log("$failedCount projects failed.  Skipping clean phase.");
} else {
  doPhase($argsMap, $argsArr, "clean");
  &log("Done. No projects failed.");
}




###################################################################################################

sub doPhase {
  my ($argsMap, $argsArr, $phase) = @_;
  my %newArgsMap = %$argsMap;
  $newArgsMap{'--project'} = $argsMap->{'--primaryModel'};
  $newArgsMap{'--controlDir'} .= "/$phase";
  $newArgsMap{'--phase'} = $phase;
  if (! -d $newArgsMap{'--controlDir'} && !mkdir $newArgsMap{'--controlDir'}) {
    die("Could not create controlDir '$newArgsMap{'--controlDir'}'.\n");
  }
  runPipeline(\%newArgsMap, $argsArr)
    && die "Failed running $phase phase.\n";
}


sub runPipeline {
  my ($argsMap, $argsArr) = @_;

 # my @cmdLineArgs = map { ($_, $argsMap->{$_}) } @$argsArr;
  my @cmdLineArgs = map { ($_, $argsMap->{$_}) } keys(%$argsMap);
  my $cmd = "eupathUserDbMigration " . join (" ", @cmdLineArgs) . " 2> $argsMap->{'--controlDir'}/pipeline.err";
  &log($cmd);
  my $status = system($cmd);
  return $status;
}

sub log {
  my ($msg) = @_;
  print LOG localtime . "\t$msg\n\n";
}

sub extractArgs {
  my @args = @_;
  my %map;
  my @arr;
  my $prevArg;
  foreach my $arg (@args) {
    if (substr($arg,0,2) eq '--') {
      $map{$arg} = "";
      $prevArg = $arg;
      push(@arr, $arg);
    } else {
      $map{$prevArg} = $arg;
    }
  }
  return (\%map, \@arr);
}

sub usage {

die "
Run a set of user db migration pipelines (serially), one per project.  Set things up by running a single pipeline, in  init phase, using the primary model as the model.  Finalize by running a single pipeline, in the clean phase, using the primary model as the model.  Only run clean if all project pipelines succeeed.

Usage: eupathUserDbMigrationMulti cmd_line_args [--projectsFile]

Where: 
  cmd_line_args:  the exact arguments you want passed to each parallel run of eupathUserDbMigration.

The list of projects is controlled by the following, in priority order:
  --project:       A comma delimited list of projects on the command line.
  --projectsFile:  if you provide this, then do not provide a --project argument.  The list of projects is taken from this file instead.
                   It is a two column tab file.  First column (not needed for this script) is 4 char abbrev, eg, plas.
                   Second column is project name, eg PlasmoDB.

                   If you do not provide either --project or --projectsFile, projects will come from:
                   \$PROJECT_HOME/EuPathSiteCommon/Model/data/migration/projects.txt

The --primaryProject argument is used as the project for the init and clean phases.

The projects list is used to drive the parallel runs.  Each project P specified in that list is given its own run.
In those separate runs:
  - the --project argument is set to a single project, P.
  - the --primaryModel argument is set to P
  - the --controlDir argument is appended with /P, to give each run a private control dir named after its project

The set of commands executed by eupathUserDbMigrationMulti are listed in controlDir/multi.log

The standard error of each run of eupathUserDbMigration is in pipeline.err, in the project's control dir.
";

}
